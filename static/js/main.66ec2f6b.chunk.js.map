{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","utils/api.ts","constants/api.ts","components/FindMovie/FindMovie.tsx","index.tsx","App.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovieData","URL","a","fetch","movieData","json","FindMovie","addNewMovie","useState","titleMovie","setTitleMovie","newMovie","setNewMovie","error","setError","addButtonStatus","setAddButtonStatus","handleSearch","movieRequest","Response","imdbID","Title","Plot","Poster","console","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","cx","value","onChange","target","onClick","disabled","ReactDOM","render","data","setMovies","document","getElementById"],"mappings":"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","file":"static/js/main.66ec2f6b.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport { Movie } from '../../constants/types';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { Movie } from '../../constants/types';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { BASE_URL } from '../constants/api';\nimport { MovieFromServer } from '../constants/types';\n\nexport const getMovieData = async (URL: string): Promise<MovieFromServer> => {\n  const movieData = await fetch(`${BASE_URL}${URL}`);\n\n  return movieData.json();\n};\n","export const BASE_URL = 'https://www.omdbapi.com/?apikey=a4fd7600&t=';\nexport const URL_IMDB = 'https://www.imdb.com/title/';\n","import React, {\n  useState,\n  ChangeEvent,\n  FormEvent,\n  FC,\n} from 'react';\nimport './FindMovie.scss';\nimport cx from 'classnames';\nimport { getMovieData } from '../../utils/api';\nimport { Movie } from '../../constants/types';\nimport { MovieCard } from '../MovieCard';\nimport { URL_IMDB } from '../../constants/api';\n\ninterface Props {\n  addNewMovie: (newMovie: Movie) => void;\n}\n\nexport const FindMovie: FC<Props> = ({ addNewMovie }) => {\n  const [titleMovie, setTitleMovie] = useState('');\n  const [newMovie, setNewMovie] = useState<Movie | null>(null);\n  const [error, setError] = useState<boolean>(false);\n  const [addButtonStatus, setAddButtonStatus] = useState<boolean>(true);\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setTitleMovie(value);\n  };\n\n  const handleSearch = async () => {\n    try {\n      const movieRequest = await getMovieData(titleMovie);\n\n      setNewMovie(null);\n\n      if (movieRequest.Response === 'True') {\n        const imdbUrl = `${URL_IMDB}${movieRequest.imdbID}`;\n\n        const movie: Movie = {\n          title: movieRequest.Title,\n          description: movieRequest.Plot,\n          imgUrl: movieRequest.Poster,\n          imdbUrl,\n          imdbId: movieRequest.imdbID,\n        };\n\n        setNewMovie(movie);\n        setError(false);\n        setAddButtonStatus(false);\n      } else {\n        setError(true);\n        setAddButtonStatus(true);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (newMovie) {\n      addNewMovie(newMovie);\n      setTitleMovie('');\n      setNewMovie(null);\n      setAddButtonStatus(true);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n          Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={cx('input', { 'is-danger': error })}\n              value={titleMovie}\n              onChange={handleInput}\n            />\n          </div>\n          {error && (\n            <p\n              className=\"help is-danger\"\n            >\n          Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={handleSearch}\n            >\n            Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n              disabled={addButtonStatus}\n            >\n            Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {newMovie && <MovieCard {...newMovie} /> }\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { FC, useState } from 'react';\nimport './App.scss';\nimport { Movie } from './constants/types';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App: FC = () => {\n  const [movies, setMovies] = useState<Movie[]>(data);\n\n  const addNewMovie = (newMovie: Movie): void => {\n    setMovies([\n      ...movies,\n      newMovie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addNewMovie={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n"],"sourceRoot":""}